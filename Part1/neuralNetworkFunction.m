function [y1] = neuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 16-Apr-2024 23:42:58.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-98.972;-95.917];
x1_step1.gain = [0.00978655523042444;0.00942875865677904];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.8369362660253623076;-2.6243143674955695666;-2.9435358687991359794;-1.5545341549480531373;-1.3494550736660979595;0.131173470798962577;1.950401624326091099;3.1233016001638143067;-3.0273583634729153147;3.8955051021455786575];
IW1_1 = [1.0728188922149044515 4.4906402597400276733;2.9517863459096203016 -0.29208498573424024336;3.5566110047547190298 -2.7186332585448083066;2.6659114008894788661 -3.6086131341041216558;1.6304904492585949871 2.9216915995999079847;5.0940351011539899417 -0.21874887702501655262;1.2454029075320753872 3.873655777522430288;2.8668989629304810762 0.044322537488662626382;-4.4750060672170848264 -0.32062859246934211077;0.41806050998748212066 -4.4890381463209028112];

% Layer 2
b2 = -0.31448354186830596024;
LW2_1 = [-0.48620803289896147303 1.1853150979827498102 -0.51445633723755623823 0.031451562511473546424 0.0096997240983513113161 -0.020930464651777131585 0.011255107613332053854 0.92926859068341594039 -0.070817971846838884131 -0.6048688979050740322];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 9.3341920790046e-07;
y1_step1.xoffset = -934960;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
